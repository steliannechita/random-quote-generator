{"version":3,"sources":["QuoteAndAuthor/QuoteAndAuthor.js","App/App.js","serviceWorker.js","index.js"],"names":["QuoteAndAuthor","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomColor","props","displayColor","document","getElementById","style","backgroundColor","react_default","a","createElement","className","color","id","quote","author","onClick","handleClick","React","Component","quotes","App","_this","generateRandomQuote","randomQuote","setState","setTimeout","state","randomNumber","Math","floor","random","length","concat","src_QuoteAndAuthor_QuoteAndAuthor","assign","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAiCeA,qBA9Bb,SAAAA,IAAc,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAD,GAAAM,KAAAH,6EAKV,IAAII,EAAYJ,KAAKK,MAAMC,eAIzB,OAHOC,SAASC,eAAe,QAC5BC,MAAMC,gBAAgBN,EAGrBO,EAAAC,EAAAC,cAAA,OAAKJ,MAAO,CAACC,gBAAgB,SACzBI,UAAU,YACZH,EAAAC,EAAAC,cAAA,MAAIJ,MAAO,CAACM,MAAMX,GACdY,GAAG,QACHF,UAAWd,KAAKK,MAAMS,WAF1B,IAEwCd,KAAKK,MAAMY,MAFnD,KAIAN,EAAAC,EAAAC,cAAA,MAAIJ,MAAO,CAACM,MAAMX,GACdY,GAAG,SACHF,UAAWd,KAAKK,MAAMS,WAF1B,IAEwCd,KAAKK,MAAMa,OAFnD,KAIAP,EAAAC,EAAAC,cAAA,UAAQJ,MAAO,CAACC,gBAAgBN,GAC5BY,GAAG,WACHG,QAASnB,KAAKK,MAAMe,aAFxB,qBArBeC,IAAMC,YCE/BC,SAAQ,CAAC,CACXN,MAAM,4DACNC,OAAO,cAAc,CACrBD,MAAM,yHACNC,OAAO,cAAc,CACrBD,MAAM,wDACNC,OAAO,mBAAmB,CAC1BD,MAAM,sEACNC,OAAO,sBAAsB,CAC7BD,MAAM,4DACNC,OAAO,mBAAmB,CAC1BD,MAAM,sDACNC,OAAO,iBAAiB,CACxBD,MAAM,gDACNC,OAAO,0BA8CMM,cAzCb,SAAAA,IAAa,IAAAC,EAAA,OAAA3B,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACXC,EAAA3B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,QAYFoB,YAAY,WACV,IAAIM,EAAoBD,EAAKE,cAC7BF,EAAKG,SAAS,CAACX,MAAMS,EAAoBT,MACzCC,OAAOQ,EAAoBR,OAAOJ,UAAU,WAC5Ce,WAAW,kBAAIJ,EAAKG,SAAS,CAACd,UAAU,MAAK,MAf7CW,EAAKK,MAAM,CACTb,MAAMM,EAAO,GAAGN,MAChBC,OAAOK,EAAO,GAAGL,OACjBJ,UAAU,IALDW,6EASX,IAAIM,EAAaC,KAAKC,MAAMD,KAAKE,SAASX,EAAOY,QACjD,OAAOZ,EAAOQ,yCAgBd,MAJS,eAAAK,OACLJ,KAAKC,MAAoB,IAAdD,KAAKE,UADX,aAAAE,OAELJ,KAAKC,MAAoB,IAAdD,KAAKE,UAFX,aAAAE,OAGLJ,KAAKC,MAAoB,IAAdD,KAAKE,UAHX,sCAQT,OACEvB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwB,EAADvC,OAAAwC,OAAA,CAAgBhC,aAAcN,KAAKI,YACnBgB,YAAapB,KAAKoB,aACdpB,KAAK8B,QACzBnB,EAAAC,EAAAC,cAAA,4CArCQQ,IAAMC,WCTJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASvC,SAASC,eAAe,SD2H3C,kBAAmBuC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.158f15c1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './QuoteAndAuthor.css'\r\nclass QuoteAndAuthor extends React.Component{\r\n  constructor(){\r\n    super();\r\n  }\r\n  \r\n    render(){\r\n      let randomColor=this.props.displayColor();\r\n      let root=document.getElementById('root');\r\n      root.style.backgroundColor=randomColor;\r\n        \r\n        return(\r\n            <div style={{backgroundColor:'white'}} \r\n                className='quotebox' >\r\n              <h1 style={{color:randomColor}} \r\n                  id='quote'\r\n                  className={this.props.className} >\"{this.props.quote}\"\r\n              </h1>\r\n              <h5 style={{color:randomColor}} \r\n                  id='author'\r\n                  className={this.props.className} >-{this.props.author}-\r\n              </h5>\r\n              <button style={{backgroundColor:randomColor}}\r\n                  id='newquote'\r\n                  onClick={this.props.handleClick}\r\n                  >New quote\r\n              </button>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default QuoteAndAuthor;","import React from 'react';\nimport QuoteAndAuthor from '../QuoteAndAuthor/QuoteAndAuthor'\nimport './App.css';\n\nlet quotes =[{\n  quote:'Life is what happens when you\\'re busy making other plans.',\n  author:'John Lenon'},{\n  quote:'Twenty years from now you will be more disappointed by the things that you didnâ€™t do than by the ones you did do.',\n  author:'Mark Twain'},{\n  quote:'Those who dare to fail miserably can achieve greatly.',\n  author:'John F. Kennedy'},{\n  quote:'It is hard to fail, but it is worse never to have tried to succeed.',\n  author:'Theodore Roosevelt'},{\n  quote:'I have no special talent. I am only passionately curious.',\n  author:'Albert Einstein'},{\n  quote:'If you judge people, you have no time to love them.',\n  author:'Mother Teresa'},{\n  quote:'Wisely, and slow. They stumble that run fast.',\n  author:'William Shakespeare '   \n    }]\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state={\n      quote:quotes[0].quote,\n      author:quotes[0].author,\n      className:''};\n\n  }\n  randomQuote(){\n    let randomNumber=Math.floor(Math.random()*quotes.length)\n    return quotes[randomNumber]\n  }\n  \n  handleClick=()=>{\n    let generateRandomQuote=this.randomQuote();\n    this.setState({quote:generateRandomQuote.quote,\n    author:generateRandomQuote.author,className:'fadeIn'});\n    setTimeout(()=>this.setState({className:''}),800)\n    \n  }\n  \n  randomColor(){\n    let color=`rgb(\n      ${Math.floor(Math.random()*155)},\n      ${Math.floor(Math.random()*155)},\n      ${Math.floor(Math.random()*155)})`\n    return color\n  }\n  \n  render(){\n    return (\n      <div>\n          <QuoteAndAuthor displayColor={this.randomColor}\n                          handleClick={this.handleClick}\n                          {...this.state}/>\n          <footer >Created by SN@2019</footer>  \n        </div>   \n   )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}