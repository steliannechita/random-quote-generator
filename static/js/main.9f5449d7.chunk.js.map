{"version":3,"sources":["QuoteAndAuthor/QuoteAndAuthor.js","App/App.js","serviceWorker.js","index.js"],"names":["QuoteAndAuthor","randomColor","this","props","displayColor","document","documentElement","style","backgroundColor","react_default","a","createElement","className","key","Math","random","color","id","quote","author","onClick","handleClick","React","Component","quotes","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","generateRandomQuote","randomQuote","setState","state","randomNumber","floor","length","concat","src_QuoteAndAuthor_QuoteAndAuthor","assign","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAuCeA,0LAlCX,IAAMC,EAAcC,KAAKC,MAAMC,eAI/B,OAHaC,SAASC,gBACjBC,MAAMC,gBAAkBP,EAG3BQ,EAAAC,EAAAC,cAAA,OAAKJ,MAAO,CAAEC,gBAAiB,SAAWI,UAAU,YAClDH,EAAAC,EAAAC,cAAA,OACEC,UAAU,SAKVC,IAAKC,KAAKC,SACVR,MAAO,CAAES,MAAOf,IAEhBQ,EAAAC,EAAAC,cAAA,MAAIM,GAAG,SAAP,IACIf,KAAKC,MAAMe,MADf,KAGAT,EAAAC,EAAAC,cAAA,MAAIM,GAAG,UAAP,IACIf,KAAKC,MAAMgB,OADf,MAIFV,EAAAC,EAAAC,cAAA,UACEJ,MAAO,CAAEC,gBAAiBP,GAC1BgB,GAAG,WACHG,QAASlB,KAAKC,MAAMkB,aAHtB,qBAxBqBC,IAAMC,YCC7BC,SAAS,CACb,CACEN,MAAO,4DACPC,OAAQ,cAEV,CACED,MACE,yHACFC,OAAQ,cAEV,CACED,MAAO,wDACPC,OAAQ,mBAEV,CACED,MACE,sEACFC,OAAQ,sBAEV,CACED,MAAO,4DACPC,OAAQ,mBAEV,CACED,MAAO,sDACPC,OAAQ,iBAEV,CACED,MAAO,gDACPC,OAAQ,0BA+CGM,cA1Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAzB,KAAAuB,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAzB,KAAAyB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA7B,QAWFmB,YAAc,WACZ,IAAMW,EAAsBN,EAAKO,cACjCP,EAAKQ,SAAS,CACZhB,MAAOc,EAAoBd,MAC3BC,OAAQa,EAAoBb,UAd9BO,EAAKS,MAAQ,CACXjB,MAAOM,EAAO,GAAGN,MACjBC,OAAQK,EAAO,GAAGL,QAJRO,6EAQZ,IAAMU,EAAetB,KAAKuB,MAAMvB,KAAKC,SAAWS,EAAOc,QACvD,OAAOd,EAAOY,yCAgBd,MAJW,eAAAG,OACPzB,KAAKuB,MAAsB,IAAhBvB,KAAKC,UADT,aAAAwB,OAEPzB,KAAKuB,MAAsB,IAAhBvB,KAAKC,UAFT,aAAAwB,OAGPzB,KAAKuB,MAAsB,IAAhBvB,KAAKC,UAHT,sCAQX,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAADb,OAAAc,OAAA,CACErC,aAAcF,KAAKD,YACnBoB,YAAanB,KAAKmB,aACdnB,KAAKiC,QAEX1B,EAAAC,EAAAC,cAAA,4CArCUW,IAAMC,WCzBJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAAS5C,SAAS6C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9f5449d7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./QuoteAndAuthor.css\";\r\n\r\nclass QuoteAndAuthor extends React.Component {\r\n  render() {\r\n    const randomColor = this.props.displayColor();\r\n    const html = document.documentElement;\r\n    html.style.backgroundColor = randomColor;\r\n\r\n    return (\r\n      <div style={{ backgroundColor: \"white\" }} className=\"quotebox\">\r\n        <div\r\n          className=\"fadeIn\"\r\n          // if the key on a react component changes, it will force the component\r\n          // to be re-rendered next pass\r\n\r\n          // so if we set the key to random it will re-render every pass!\r\n          key={Math.random()}\r\n          style={{ color: randomColor }}\r\n        >\r\n          <h1 id=\"quote\">\r\n            \"{this.props.quote}\"\r\n          </h1>\r\n          <h5 id=\"author\">\r\n            -{this.props.author}-\r\n          </h5>\r\n        </div>\r\n        <button\r\n          style={{ backgroundColor: randomColor }}\r\n          id=\"newquote\"\r\n          onClick={this.props.handleClick}\r\n        >\r\n          New quote\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuoteAndAuthor;\r\n","import React from \"react\";\r\nimport QuoteAndAuthor from \"../QuoteAndAuthor/QuoteAndAuthor\";\r\nimport \"./App.css\";\r\n\r\nconst quotes = [\r\n  {\r\n    quote: \"Life is what happens when you're busy making other plans.\",\r\n    author: \"John Lenon\"\r\n  },\r\n  {\r\n    quote:\r\n      \"Twenty years from now you will be more disappointed by the things that you didnâ€™t do than by the ones you did do.\",\r\n    author: \"Mark Twain\"\r\n  },\r\n  {\r\n    quote: \"Those who dare to fail miserably can achieve greatly.\",\r\n    author: \"John F. Kennedy\"\r\n  },\r\n  {\r\n    quote:\r\n      \"It is hard to fail, but it is worse never to have tried to succeed.\",\r\n    author: \"Theodore Roosevelt\"\r\n  },\r\n  {\r\n    quote: \"I have no special talent. I am only passionately curious.\",\r\n    author: \"Albert Einstein\"\r\n  },\r\n  {\r\n    quote: \"If you judge people, you have no time to love them.\",\r\n    author: \"Mother Teresa\"\r\n  },\r\n  {\r\n    quote: \"Wisely, and slow. They stumble that run fast.\",\r\n    author: \"William Shakespeare \"\r\n  }\r\n];\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      quote: quotes[0].quote,\r\n      author: quotes[0].author,\r\n    };\r\n  }\r\n  randomQuote() {\r\n    const randomNumber = Math.floor(Math.random() * quotes.length);\r\n    return quotes[randomNumber];\r\n  }\r\n\r\n  handleClick = () => {\r\n    const generateRandomQuote = this.randomQuote();\r\n    this.setState({\r\n      quote: generateRandomQuote.quote,\r\n      author: generateRandomQuote.author\r\n    });\r\n  };\r\n\r\n  randomColor() {\r\n    const color = `rgb(\r\n      ${Math.floor(Math.random() * 155)},\r\n      ${Math.floor(Math.random() * 155)},\r\n      ${Math.floor(Math.random() * 155)})`;\r\n    return color;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <QuoteAndAuthor\r\n          displayColor={this.randomColor}\r\n          handleClick={this.handleClick}\r\n          {...this.state}\r\n        />\r\n        <footer>Created by SN@2019</footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}